{
if((B[i,j] != 1) & (B[j,i]!= 1)){
U <- runif(1)
if(U < d){
B[i, j] <- 1
} else if(U < (b + d))
{
Omega[i,j] <- Omega[j,i] <- 1
}
}
}
}
# reorder the vertices
reorder <- sample(p)
B <- B[reorder, reorder]
Omega <- Omega[reorder, reorder]
# Sample edge weights as given in the paper
B.true <- matrix(runif(p^2,-1,1), nrow = p) * B
Omega.true <- matrix(runif(p^2,-1,1), nrow = p)
Omega.true[lower.tri(Omega.true, diag = F)] <- t(Omega.true)[lower.tri(Omega.true, diag = F)]
Omega.true <- Omega.true * Omega
# ensure Omega.true is PD by making it diagonally dominant
for(i in 1:p){
Omega.true[i,i] <- sum(abs(Omega.true[i, -i])) + 1 + rchisq(1, df = 1)
}
temp <- solve(diag(rep(1,p)) - B.true)
sigma <- temp %*% Omega.true %*% t(temp)
Y <- t(mvrnorm(n = n, mu = rep(0, p), Sigma = sigma))
out <- ricf(B, Omega, Y)
round(abs(out$B - B.true),2)
round(abs(out$O - Omega.true),2)
p <- 10
n <- 100000
d <- .2
b <- .1
B <- matrix(0, nrow = p, ncol = p)
Omega <- diag(rep(1, p))
# fill in remaining edges
for(j in 1:(p-1))
{
for(i in (j+1):p)
{
if((B[i,j] != 1) & (B[j,i]!= 1)){
U <- runif(1)
if(U < d){
B[i, j] <- 1
} else if(U < (b + d))
{
Omega[i,j] <- Omega[j,i] <- 1
}
}
}
}
# reorder the vertices
reorder <- sample(p)
B <- B[reorder, reorder]
Omega <- Omega[reorder, reorder]
# Sample edge weights as given in the paper
B.true <- matrix(runif(p^2,-1,1), nrow = p) * B
Omega.true <- matrix(runif(p^2,-1,1), nrow = p)
Omega.true[lower.tri(Omega.true, diag = F)] <- t(Omega.true)[lower.tri(Omega.true, diag = F)]
Omega.true <- Omega.true * Omega
# ensure Omega.true is PD by making it diagonally dominant
for(i in 1:p){
Omega.true[i,i] <- sum(abs(Omega.true[i, -i])) + 1 + rchisq(1, df = 1)
}
temp <- solve(diag(rep(1,p)) - B.true)
sigma <- temp %*% Omega.true %*% t(temp)
Y <- t(mvrnorm(n = n, mu = rep(0, p), Sigma = sigma))
out <- ricf(B, Omega, Y)
round(abs(out$B - B.true),2)
round(abs(out$O - Omega.true),2)
Omega.true
12 * 12 *3
p <- 20
B <- matrix(0, nrow = p, ncol = p)
Omega <- diag(rep(1, p))
k <- 4
if(k > 0){
for(i in 1:(k-1))
{
B[i+1, i] <- 1
}
B[1, k] <- 1
}
b <- .05
d <- .1
# fill in remaining edges
for(i in 2:p)
{
for(j in 1:(i-1))
{
if(!B[j,i]){
U <- runif(1)
if(U < d){
B[j, i] <-1
} else {
if(U < b + d)
{
Omega[i,j] <- Omega[j,i] <- 1
}
}
}
}
}
# reorder the vertices
reorder <- sample(p)
B <- B[reorder, reorder]
Omega <- Omega[reorder, reorder]
# Sample edge weights as given in the paper
B.true <- matrix(rnorm(p^2), nrow = p) * B
Omega.true <- matrix(rnorm(p^2), nrow = p)
Omega.true[lower.tri(Omega.true, diag = F)] <- t(Omega.true)[lower.tri(Omega.true, diag = F)]
Omega.true <- Omega.true * Omega
# ensure Omega.true is PD by making it diagonally dominant
for(i in 1:p){
Omega.true[i,i] <- sum(abs(Omega.true[i, -i])) + 1 + rchisq(1, df = 1)
}
sigma <- solve(diag(rep(1,p)) - B.true) %*% Omega.true %*% t(solve(diag(rep(1,p)) - B.true))
# Sample data from multivariate normal and make mean 0
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, p), Sigma = sigma))
Y <- Y - rowMeans(Y)
out.ricf <- ricf(B = B, Omega = Omega, Y = Y, BInit = NULL,
OmegaInit = NULL, sigConv = 0, maxIter = 5000,
msgs = FALSE, omegaInitScale = .9, tol = 1e-6)
library(BCD)
library(BCD)
library(BCD)
out.ricf <- ricf(B = B, Omega = Omega, Y = Y, BInit = NULL,
OmegaInit = NULL, sigConv = 0, maxIter = 5000,
msgs = FALSE, omegaInitScale = .9, tol = 1e-6)
out.ricf$BHat
round(out.ricf$BHat - B.true, 3)
round(out.ricf$O - Omega.true, 3)
dim(Y)
n
library(BCD)
install.packages("roxygen2")
library(BCD)
library(BCD)
library(BCD)
?ricf
mvtnorm
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
epsilon <- mvtnorm::rmvnorm(200, mean = rep(0, 4), sigma = Omega.weights)
Omega.weights
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
epsilon <- mvtnorm::rmvnorm(200, mean = rep(0, 4), sigma = Omega.weights)
epsilon
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
epsilon <- t(mvtnorm::rmvnorm(200, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
Y
y <- Y - rowMeans(Y)
Y <- Y - rowMeans(Y)
rowMeans(Y)
ricf(B, Omega, Y)
Omega
Omega.weights != 0
Omega <- Omega.weights != 0
Omega
Omega <- (Omega.weights != 0) + 0
Omega
B <- (B.weights != 0) + 0
B
Omega
ricf(B, Omega, Y)
B
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 500
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 200
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 200
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 200
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 200
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 200
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 200
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 200
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 200
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
# Select True Parameters
Omega.weights <- diag(rep(1, 4))
Omega.weights[1, 2] <- Omega.weights[2, 1] <- .5
B.weights <- matrix(0, nrow = 4, ncol = 4)
B.weights[3, 1] <- .5; B.weights[4, 2] <- .7
# Generate data
n <- 200
epsilon <- t(mvtnorm::rmvnorm(n, mean = rep(0, 4), sigma = Omega.weights))
Y <- solve(diag(rep(1, 4)) - B.weights, epsilon)
# Center Data Y
Y <- Y - rowMeans(Y)
B <- (B.weights != 0) + 0
Omega <- (Omega.weights != 0) + 0
ricf(B, Omega, Y)
B.weights
cov(t(Y))
library(BCD)
library(BCD)
install.packages("roxygen2")
