// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bcdC
Rcpp::List bcdC(SEXP Br, SEXP Omegar, SEXP BInitr, SEXP OmegaInitr, SEXP Yr, int maxIter, int sigConv, double maxKap, double tol, double omegaInitScale);
RcppExport SEXP BCD_bcdC(SEXP BrSEXP, SEXP OmegarSEXP, SEXP BInitrSEXP, SEXP OmegaInitrSEXP, SEXP YrSEXP, SEXP maxIterSEXP, SEXP sigConvSEXP, SEXP maxKapSEXP, SEXP tolSEXP, SEXP omegaInitScaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type Br(BrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Omegar(OmegarSEXP);
    Rcpp::traits::input_parameter< SEXP >::type BInitr(BInitrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type OmegaInitr(OmegaInitrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< int >::type sigConv(sigConvSEXP);
    Rcpp::traits::input_parameter< double >::type maxKap(maxKapSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type omegaInitScale(omegaInitScaleSEXP);
    __result = Rcpp::wrap(bcdC(Br, Omegar, BInitr, OmegaInitr, Yr, maxIter, sigConv, maxKap, tol, omegaInitScale));
    return __result;
END_RCPP
}
// sempl_input
NumericVector sempl_input(SEXP b_weights_r, SEXP y_r, SEXP b_r, bool mean_est_r, SEXP covar_restrict, double tol, int max_iter);
RcppExport SEXP BCD_sempl_input(SEXP b_weights_rSEXP, SEXP y_rSEXP, SEXP b_rSEXP, SEXP mean_est_rSEXP, SEXP covar_restrictSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type b_weights_r(b_weights_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y_r(y_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b_r(b_rSEXP);
    Rcpp::traits::input_parameter< bool >::type mean_est_r(mean_est_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type covar_restrict(covar_restrictSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    __result = Rcpp::wrap(sempl_input(b_weights_r, y_r, b_r, mean_est_r, covar_restrict, tol, max_iter));
    return __result;
END_RCPP
}
// sempl_input_weights
Rcpp::List sempl_input_weights(SEXP b_weights_r, SEXP y_r, SEXP b_r, bool mean_est_r, SEXP covar_restrict, double tol, int max_iter);
RcppExport SEXP BCD_sempl_input_weights(SEXP b_weights_rSEXP, SEXP y_rSEXP, SEXP b_rSEXP, SEXP mean_est_rSEXP, SEXP covar_restrictSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type b_weights_r(b_weights_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y_r(y_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b_r(b_rSEXP);
    Rcpp::traits::input_parameter< bool >::type mean_est_r(mean_est_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type covar_restrict(covar_restrictSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    __result = Rcpp::wrap(sempl_input_weights(b_weights_r, y_r, b_r, mean_est_r, covar_restrict, tol, max_iter));
    return __result;
END_RCPP
}
// sempl_input_naive
NumericVector sempl_input_naive(SEXP weights_r, SEXP y_r, SEXP b_r, SEXP omega_r, bool mean_est_r, double tol, int max_iter);
RcppExport SEXP BCD_sempl_input_naive(SEXP weights_rSEXP, SEXP y_rSEXP, SEXP b_rSEXP, SEXP omega_rSEXP, SEXP mean_est_rSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type weights_r(weights_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y_r(y_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b_r(b_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type omega_r(omega_rSEXP);
    Rcpp::traits::input_parameter< bool >::type mean_est_r(mean_est_rSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    __result = Rcpp::wrap(sempl_input_naive(weights_r, y_r, b_r, omega_r, mean_est_r, tol, max_iter));
    return __result;
END_RCPP
}
// sempl_input_naive_weights
Rcpp::List sempl_input_naive_weights(SEXP weights_r, SEXP y_r, SEXP b_r, SEXP omega_r, bool mean_est_r, double tol, int max_iter);
RcppExport SEXP BCD_sempl_input_naive_weights(SEXP weights_rSEXP, SEXP y_rSEXP, SEXP b_rSEXP, SEXP omega_rSEXP, SEXP mean_est_rSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type weights_r(weights_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y_r(y_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b_r(b_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type omega_r(omega_rSEXP);
    Rcpp::traits::input_parameter< bool >::type mean_est_r(mean_est_rSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    __result = Rcpp::wrap(sempl_input_naive_weights(weights_r, y_r, b_r, omega_r, mean_est_r, tol, max_iter));
    return __result;
END_RCPP
}
// sempl_input_grad
NumericVector sempl_input_grad(SEXP b_weights_r, SEXP y_r, SEXP b_r, bool mean_est_r, SEXP covar_restrict, double tol, int max_iter);
RcppExport SEXP BCD_sempl_input_grad(SEXP b_weights_rSEXP, SEXP y_rSEXP, SEXP b_rSEXP, SEXP mean_est_rSEXP, SEXP covar_restrictSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type b_weights_r(b_weights_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y_r(y_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b_r(b_rSEXP);
    Rcpp::traits::input_parameter< bool >::type mean_est_r(mean_est_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type covar_restrict(covar_restrictSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    __result = Rcpp::wrap(sempl_input_grad(b_weights_r, y_r, b_r, mean_est_r, covar_restrict, tol, max_iter));
    return __result;
END_RCPP
}
// sempl_input_reg
double sempl_input_reg(SEXP b_weights_r, SEXP y_r, SEXP b_r, bool mean_est_r, SEXP covar_restrict, double tol, int max_iter);
RcppExport SEXP BCD_sempl_input_reg(SEXP b_weights_rSEXP, SEXP y_rSEXP, SEXP b_rSEXP, SEXP mean_est_rSEXP, SEXP covar_restrictSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type b_weights_r(b_weights_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y_r(y_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b_r(b_rSEXP);
    Rcpp::traits::input_parameter< bool >::type mean_est_r(mean_est_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type covar_restrict(covar_restrictSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    __result = Rcpp::wrap(sempl_input_reg(b_weights_r, y_r, b_r, mean_est_r, covar_restrict, tol, max_iter));
    return __result;
END_RCPP
}
