u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 5000)
if(!out$converged){
counter <- counter + 1
print(paste("Non-Convergence:", counter))
saveRDS(out, paste("model", counter,".RDS", sep = ""))
}
}
###### Try to find something outside the model #####
library(MASS)
library(BCD)
setwd("C:/Users/ysamwang/Dropbox/Cyclic Graphs/testCases/")
V <- 5
n <- 10
counter <- 0
d <- .3
b <- d/2
while(0 < 1){
m <- matrix(rnorm(V^2), nrow = V)
sigma <- m %*% t(m)
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, V), Sigma = sigma))
B <- matrix(0, V, V)
Omega <- diag(rep(1,V))
for(i in 2:V){
for(j in 1:i){
u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 5000, Y = Y)
if(!out$converged){
counter <- counter + 1
print(paste("Non-Convergence:", counter))
saveRDS(out, paste("model", counter,".RDS", sep = ""))
}
}
B
D
Omega
###### Try to find something outside the model #####
library(MASS)
library(BCD)
setwd("C:/Users/ysamwang/Dropbox/Cyclic Graphs/testCases/")
V <- 5
n <- 10
counter <- 0
d <- .3
b <- d/2
while(0 < 1){
m <- matrix(rnorm(V^2), nrow = V)
sigma <- m %*% t(m)
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, V), Sigma = sigma))
B <- matrix(0, V, V)
Omega <- diag(rep(1,V))
for(i in 2:V){
for(j in 1:(i-1)){
u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 5000, Y = Y)
if(!out$converged){
counter <- counter + 1
print(paste("Non-Convergence:", counter))
saveRDS(out, paste("model", counter,".RDS", sep = ""))
}
}
out
out$Converged
###### Try to find something outside the model #####
library(MASS)
library(BCD)
setwd("C:/Users/ysamwang/Dropbox/Cyclic Graphs/testCases/")
V <- 5
n <- 10
counter <- 0
d <- .3
b <- d/2
while(0 < 1){
m <- matrix(rnorm(V^2), nrow = V)
sigma <- m %*% t(m)
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, V), Sigma = sigma))
B <- matrix(0, V, V)
Omega <- diag(rep(1,V))
for(i in 2:V){
for(j in 1:(i-1)){
u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 8000, Y = Y)
if(!out$Converged){
counter <- counter + 1
print(paste("Non-Convergence:", counter))
saveRDS(out, paste("model", counter,".RDS", sep = ""))
}
}
out <- readRDS("model1.RDS")
out
###### Try to find something outside the model #####
library(MASS)
library(BCD)
setwd("C:/Users/ysamwang/Dropbox/Cyclic Graphs/testCases/")
V <- 5
n <- 10
counter <- 0
d <- .3
b <- d/2
while(0 < 1){
m <- matrix(rnorm(V^2), nrow = V)
sigma <- m %*% t(m)
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, V), Sigma = sigma))
B <- matrix(0, V, V)
Omega <- diag(rep(1,V))
for(i in 2:V){
for(j in 1:(i-1)){
u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 20000, Y = Y)
if(!out$Converged){
counter <- counter + 1
print(paste("Non-Convergence:", counter))
saveRDS(out, paste("model", counter,".RDS", sep = ""))
}
}
###### Try to find something outside the model #####
library(MASS)
library(BCD)
setwd("C:/Users/ysamwang/Dropbox/Cyclic Graphs/testCases/")
V <- 5
n <- 10
counter <- 0
d <- .3
b <- d/2
while(0 < 1){
m <- matrix(rnorm(V^2), nrow = V)
sigma <- m %*% t(m)
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, V), Sigma = sigma))
B <- matrix(0, V, V)
Omega <- diag(rep(1,V))
for(i in 2:V){
for(j in 1:(i-1)){
u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 20000, Y = Y)
cat(".")
if(!out$Converged){
counter <- counter + 1
cat(paste("\n Non-Convergence:", counter, "\n"))
saveRDS(list(out, sigma, Y, B, Omega), paste("nonConverged", counter,".RDS", sep = ""))
}
}
out <- readRDS("nonConverged1.RDS")
out
###### Try to find something outside the model #####
library(MASS)
library(BCD)
setwd("C:/Users/ysamwang/Dropbox/Cyclic Graphs/testCases/")
V <- 5
n <- 10
counter <- 0
d <- .3
b <- d/2
while(0 < 1){
m <- matrix(rnorm(V^2), nrow = V)
sigma <- m %*% t(m)
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, V), Sigma = sigma))
B <- matrix(0, V, V)
Omega <- diag(rep(1,V))
for(i in 2:V){
for(j in 1:(i-1)){
u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 100000, Y = Y)
cat(".")
if(!out$Converged){
counter <- counter + 1
cat(paste("\n Non-Convergence:", counter, "\n"))
saveRDS(list(out, sigma, Y, B, Omega), paste("nonConverged", counter,".RDS", sep = ""))
}
}
5 % 2
5 %% 2
###### Try to find something outside the model #####
library(MASS)
library(BCD)
setwd("C:/Users/ysamwang/Dropbox/Cyclic Graphs/testCases/")
V <- 5
n <- 10
counter <- 0
tries <- 0
d <- .3
b <- d/2
while(0 < 1){
m <- matrix(rnorm(V^2), nrow = V)
sigma <- m %*% t(m)
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, V), Sigma = sigma))
B <- matrix(0, V, V)
Omega <- diag(rep(1,V))
for(i in 2:V){
for(j in 1:(i-1)){
u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 100000, Y = Y)
tries <- tries + 1
if(tries %% 100 == 0){
cat(".")
}
if(!out$Converged){
counter <- counter + 1
cat(paste("\n Non-Convergence:", counter, "\n"))
saveRDS(list(out, sigma, Y, B, Omega), paste("nonConverged", counter,".RDS", sep = ""))
}
}
o
out <- readRDS("nonConverged1.RDS")
out
out[[1]]
out[[1]]$BHat
norm(out[[1]]$BHat,1)
norm(out[[1]]$BHat,"1")
norm(out[[1]]$BHat,"fro")
norm(out[[1]]$BHat,"2")
?nrom
?norm
###### Try to find something outside the model #####
library(MASS)
library(BCD)
setwd("C:/Users/ysamwang/Dropbox/Cyclic Graphs/testCases/")
V <- 5
n <- 10
counter <- 0
tries <- 0
d <- .3
b <- d/2
set.seed(1001)
while(0 < 1){
m <- matrix(rnorm(V^2), nrow = V)
sigma <- m %*% t(m)
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, V), Sigma = sigma))
B <- matrix(0, V, V)
Omega <- diag(rep(1,V))
for(i in 2:V){
for(j in 1:(i-1)){
u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 100000, Y = Y)
tries <- tries + 1
if(tries %% 100 == 0){
cat(".")
}
if(!out$Converged){
out2 <- ricf(B = B, Omega = Omega, BInit = out$BHat, OmegaInit = out$OmegaHat, Y = Y, maxIter = 100000)
if(norm(out2$BHat,"F") - norm(out$BHat,"F") > 100 | norm(out2$OmegaHat,"F") - norm(out$OmegaHat,"F") > 100){
counter <- counter + 1
cat(paste("\n Non-Convergence:", counter, "\n"))
saveRDS(list(out2, sigma, Y, B, Omega), paste("nonConverged", counter,".RDS", sep = ""))
}
}
}
tries
out <- readRDS("nonConverged1.RDS")
out
failure <- readRDS("nonConverged1.RDS")
out <- ricf(B = failure[[4]], Omega = failure[[5]],
Y = failure[[3]], maxIter = 10000)
out$OmegaHat
out <- ricf(B = failure[[4]], Omega = failure[[5]],
Y = failure[[3]], maxIter = 100000)
out$OmegaHat
out <- ricf(B = failure[[4]], Omega = failure[[5]],
Y = failure[[3]], maxIter = 200000)
out$OmegaHat
out <- ricf(B = failure[[4]], Omega = failure[[5]],
Y = failure[[3]], maxIter = 1000000)
out$OmegaHat
out$Converged
out$Iter
###### Try to find something outside the model #####
library(MASS)
library(BCD)
setwd("C:/Users/ysamwang/Dropbox/Cyclic Graphs/testCases/")
V <- 5
n <- 10
counter <- 0
tries <- 0
d <- .3
b <- d/2
set.seed(1001)
while(0 < 1){
m <- matrix(rnorm(V^2), nrow = V)
sigma <- m %*% t(m)
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, V), Sigma = sigma))
B <- matrix(0, V, V)
Omega <- diag(rep(1,V))
for(i in 2:V){
for(j in 1:(i-1)){
u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 200000, Y = Y)
tries <- tries + 1
if(tries %% 100 == 0){
cat(".")
}
if(!out$Converged){
if(max(abs(out$BHat)) > 50000 | max(abs(out$OmegaHat))  > 50000){
counter <- counter + 1
cat(paste("\n Non-Convergence:", counter, "\n"))
saveRDS(list(out2, sigma, Y, B, Omega), paste("nonConverged", counter,".RDS", sep = ""))
}
}
}
tries
failure <- readRDS("nonConverged1.RDS")
failure
###### Try to find something outside the model #####
library(MASS)
library(BCD)
setwd("C:/Users/ysamwang/Dropbox/Cyclic Graphs/testCases/")
V <- 5
n <- 10
counter <- 0
tries <- 0
d <- .2
b <- d/2
set.seed(1001)
while(0 < 1){
m <- matrix(rnorm(V^2), nrow = V)
sigma <- m %*% t(m)
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, V), Sigma = sigma))
B <- matrix(0, V, V)
Omega <- diag(rep(1,V))
for(i in 2:V){
for(j in 1:(i-1)){
u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 200000, Y = Y)
tries <- tries + 1
if(tries %% 100 == 0){
cat(".")
}
if(!out$Converged){
if(max(abs(out$BHat)) > 50000 | max(abs(out$OmegaHat))  > 50000){
counter <- counter + 1
cat(paste("\n Non-Convergence:", counter, "\n"))
saveRDS(list(out, sigma, Y, B, Omega), paste("nonConverged", counter,".RDS", sep = ""))
}
}
}
failure <- readRDS("nonConverged1.RDS")
failure
outEst <- failure[[1]]
out <- ricf(failure[[4]], failure[[5]], failure[[3]], failure[[1]]$BHat,failure[[1]]$OmegaHat, maxIter = 10000)
out$OmegaHat
outEst$OmegaHat
out$Converged
out$Iter
out <- ricf(failure[[4]], failure[[5]], failure[[3]], failure[[1]]$BHat,failure[[1]]$OmegaHat, maxIter = 100000)
out$Iter
out$Converged
###### Try to find something outside the model #####
library(MASS)
library(BCD)
setwd("C:/Users/ysamwang/Dropbox/Cyclic Graphs/testCases/")
V <- 5
n <- 10
counter <- 0
tries <- 0
d <- .2
b <- d/2
set.seed(1001)
while(0 < 1){
m <- matrix(rnorm(V^2), nrow = V)
sigma <- m %*% t(m)
Y <- t(MASS::mvrnorm(n = n, mu = rep(0, V), Sigma = sigma))
B <- matrix(0, V, V)
Omega <- diag(rep(1,V))
for(i in 2:V){
for(j in 1:(i-1)){
u <- runif(1)
if(u < d)
{
B[i, j] <- 1
} else if ( u < (b + d))
{
Omega[i,j] <- Omega[j, i] <- 1
}
}
}
out <- ricf(B = B, Omega = Omega, maxIter = 500000, Y = Y)
tries <- tries + 1
if(tries %% 1000 == 0){
cat(".")
}
if(!out$Converged){
if(max(abs(out$BHat)) > 100000 | max(abs(out$OmegaHat))  > 100000){
counter <- counter + 1
cat(paste("\n Non-Convergence:", counter, "\n"))
saveRDS(list(out, sigma, Y, B, Omega), paste("nonConverged", counter,".RDS", sep = ""))
}
}
}
failure <- readRDS("nonConverged1.RDS")
outEst <- failure[[1]]
outEst$OmegaHat
outEst$BHat
out <- ricf(failure[[4]], failure[[5]], failure[[3]], failure[[1]]$BHat,failure[[1]]$OmegaHat, maxIter = 100000)
out$OmegaHat
out$BHat
out <- ricf(failure[[4]], failure[[5]], failure[[3]], failure[[1]]$BHat,failure[[1]]$OmegaHat, maxIter = 1000000)
out$OmegaHat
out$BHat
out$converged
out$convergence
names(out)
out$Converged
out$OmegaHat
source('C:/Users/ysamwang/Dropbox/Cyclic Graphs/BCD/tests/outsideModelSearch.R', echo=TRUE)
failure <- readRDS("nonConverged2.RDS")
outEst <- failure[[1]]
outEst$OmegaHat
outEst$BHat
out <- ricf(failure[[4]], failure[[5]], failure[[3]], failure[[1]]$BHat,failure[[1]]$OmegaHat, maxIter = 1000000)
out$Converged
out$OmegaHat
out$BHat
out$OmegaHat - outEst$OmegaHat
out$OmegaHat
out$BHat
